require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ReviewsController do

  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController. Be sure to keep this updated too.
  def valid_session
    {}
  end
    

  describe "GET #index" do
    it "should get index" do
      signed_in_as_a_valid_admin
      get 'index'
      response.should be_success
    end
  end

  describe "GET #new" do
   it "renders the :new template" do
      signed_in_as_a_valid_user
      get :new, id: @review, review: FactoryGirl.attributes_for(:review)
      response.should render_template :new
    end
  end

  #describe "GET edit" do
  #  it "assigns the requested review as @review" do
  #    signed_in_as_a_valid_user
  #    review = Review.create! valid_attributes
  #    get :edit, {:id => review.to_param}, valid_session
  #    assigns(:review).should eq(review)
  #  end
  #end


  describe 'DELETE #destroy' do
    
    before :each do
      @review = FactoryGirl.create(:review)
      #post_via_redirect admin_session_path, 'admin[admin@admin.com]' => admin.email, 'admin[password]' => admin.password
    end
  
    it "deletes the contact" do
      signed_in_as_a_valid_admin
      expect{
        delete :destroy, id: @review        
      }.to change(Review,:count).by(-1)
    end
    
    it "redirects to venues#index" do
      signed_in_as_a_valid_admin
      delete :destroy, id: @review
      response.should redirect_to root_url
    end
  end

end
